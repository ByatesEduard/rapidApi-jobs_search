// src/pages/LikePage.tsx
import { useEffect, useState } from "react";
import {
  Box,
  SimpleGrid,
  Heading,
  Text,
  Center,
  Button,
  Flex,
} from "@chakra-ui/react";
import { Link as RouterLink } from "react-router-dom";
import axios from "../utils/axios";

interface Job {
  job_id: string;
  job_title: string;
  employer_name: string;
}

const LikePage = () => {
  const [likedJobs, setLikedJobs] = useState<Job[]>([]);

  // –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —á–∏—Ç–∞—î–º–æ localStorage
  useEffect(() => {
    const saved = localStorage.getItem("likedJobsData");
    if (saved) {
      setLikedJobs(JSON.parse(saved));
    }
  }, []);

  // –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–∏—Ö
  const removeFromLiked = (jobId: string) => {
    const updated = likedJobs.filter((job) => job.job_id !== jobId);
    setLikedJobs(updated);
    localStorage.setItem("likedJobsData", JSON.stringify(updated));
    try {
      // –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ ID –ª–∞–π–∫—ñ–≤, —â–æ–± –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –≤–∞–∫–∞–Ω—Å—ñ–π —Å–µ—Ä—Ü–µ —Å—Ç–∞–ª–æ –ø–æ—Ä–æ–∂–Ω—ñ–º
      const savedIds = localStorage.getItem("likedJobs");
      const ids: string[] = savedIds ? JSON.parse(savedIds) : [];
      const newIds = ids.filter((id) => id !== jobId);
      localStorage.setItem("likedJobs", JSON.stringify(newIds));

      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π (—î —Ç–æ–∫–µ–Ω), —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –±–µ–∫–µ–Ω–¥
      const hasToken = !!localStorage.getItem("token");
      if (hasToken) {
        axios.delete(`/likes/${jobId}`).catch(() => {});
      }
    } catch {
      console.log('–ø—Ä–æ–±–ª–µ–º–∞ –∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º ')
    }

    // –°–ø–æ–≤—ñ—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ –∑–º—ñ–Ω—É –ª–∞–π–∫—ñ–≤ (–ø–æ–¥—ñ—è storage –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –≤ —Ç—ñ–π —Å–∞–º—ñ–π –≤–∫–ª–∞–¥—Ü—ñ)
    window.dispatchEvent(new Event("likes-updated"));
  };

  return (
    <Box p={6}>
      <Heading mb={6} color="white">
        üíñ –û–±—Ä–∞–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó
      </Heading>

      <SimpleGrid columns={{ base: 1, sm: 2, lg: 3 }} gap={4}>
        {likedJobs.length > 0 ? (
          likedJobs.map((job) => (
            <Box
              key={job.job_id}
              borderWidth="1px"
              borderColor="whiteAlpha.200"
              bg="gray.900"
              p={4}
              rounded="lg"
            >
              <RouterLink
                to={`/job-details/${job.job_id}`}
                style={{ textDecoration: "none" }}
              >
                <Heading size="sm" color="white" mb={1}>
                  {job.job_title}
                </Heading>
                <Text fontSize="sm" color="gray.300">
                  {job.employer_name}
                </Text>
              </RouterLink>

              <Flex mt={3}>
                <Button
                  size="sm"
                  colorScheme="red"
                  onClick={() => removeFromLiked(job.job_id)}
                >
                  ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏
                </Button>
              </Flex>
            </Box>
          ))
        ) : (
          <Center gridColumn="1 / -1">
            <Text color="gray.400">–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π üò¢</Text>
          </Center>
        )}
      </SimpleGrid>
    </Box>
  );
};

export default LikePage;
